{
  "name": "gulp-ng-constant-fork",
  "version": "0.4.1",
  "description": "Gulp plugin for dynamic generation of angular constant modules. Forked version of https://github.com/guzart/gulp-ng-constant with extra options.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/andidev/gulp-ng-constant-fork.git"
  },
  "keywords": [
    "gulp",
    "angularjs",
    "constant",
    "gulpplugin"
  ],
  "author": {
    "name": "Anders Steiner"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andidev/gulp-ng-constant-fork/issues"
  },
  "homepage": "https://github.com/andidev/gulp-ng-constant-fork",
  "scripts": {
    "test": "node_modules/jasmine-node/bin/jasmine-node spec/gulpNgConstantSpec.js"
  },
  "dependencies": {
    "lodash": "3.0.0",
    "gulp-util": "2.2.20",
    "through2": "0.6.3"
  },
  "devDependencies": {
    "jasmine-node": "1.14.5"
  },
  "readme": "gulp-ng-constant-fork\n================\n\n[![Build Status](https://travis-ci.org/andidev/gulp-ng-constant-fork.svg)](https://travis-ci.org/andidev/gulp-ng-constant-fork.svg)\n\n## Information\n\n<table>\n<tr>\n<td>Package</td><td>gulp-ng-constant-fork</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Plugin for dynamic generation of angular constant modules. Forked version of <a href=\"https://github.com/guzart/gulp-ng-constant\">guzart/gulp-ng-constant</a> with extra options.<br>\nBased of <a href=\"https://github.com/werk85/grunt-ng-constant\">grunt-ng-constant</a>.</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.10</td>\n</tr>\n</table>\n\n## Usage\n\nThis plugin is a fork of [guzarts plugin gulp-ng-constant](https://github.com/guzart/gulp-ng-constant) so credits to him. Use this in the same way as the original plugin. This plugin was created to solve the [deps false issue](https://github.com/guzart/gulp-ng-constant/issues/11) and the problem that the [plugin cannot be called without referencing a config.json file](https://github.com/guzart/gulp-ng-constant/pull/9). Plus it also ads a interpolation option used by lodash to detect data property values to inject in the templates.\n\n### configuration in `gulpfile.js`\n\n_**gulpfile.js**_\n\n    var ngConstant = require('gulp-ng-constant-fork');\n\n    gulp.task('config', function () {\n        ngConstant({\n            dest: 'app.config.js',\n            name: 'my.module.config',\n            noFile: true,\n            deps: false,\n            constants: { ENV: 'dev' }\n        })\n        // Writes app.config.js to dist/ folder\n        .pipe(gulp.dest('dist'));\n    });\n\n_**dist/app.config.js**_ _(output)_\n\n    angular.module(\"my.module.config\")\n    .constant(\"ENV\", \"dev\");\n\n### configuration in `gulpfile.js`\n\n_**gulpfile.js**_\n\n    var ngConstant = require('gulp-ng-constant-fork');\n\n    gulp.task('config', function () {\n        ngConstant({\n            dest: 'app.config.js',\n            name: 'my.module.config',\n            noFile: true,\n            deps: false,\n            interpolate: /\\{%=(.+?)%\\}/g,\n            wrap: '\"use strict\";\\n// DO NOT EDIT THIS FILE, EDIT THE GULP TASK SETTINGS INSTEAD WHICH GENERATES THIS FILE\\n<%= __ngModule %>',\n            constants: { ENV: 'dev' }\n        })\n        // Writes app.config.js to dist/ folder\n        .pipe(gulp.dest('dist'));\n    });\n\n_**dist/app.config.js**_ _(output)_\n\n    \"use strict\";\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK  SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular.module(\"my.module.config\")\n    .constant(\"ENV\", \"dev\");\n\n### configuration in `gulpfile.js`\n\n_**gulpfile.js**_\n\n    var ngConstant = require('gulp-ng-constant-fork');\n\n    gulp.task('config', function () {\n      gulp.src('app/config.json')\n        .pipe(ngConstant({\n          name: 'my.module.config',\n          deps: ['ngAnimate'],\n          constants: { myPropCnt: 'hola!' },\n          wrap: 'amd',\n        }))\n        // Writes config.js to dist/ folder\n        .pipe(gulp.dest('dist'));\n    });\n\n_**app/config.json**_\n\n    {\n      \"myFirstCnt\": true,\n      \"mySecondCnt\": { \"hello\": \"world\" }\n    }\n\n_**dist/config.js**_ _(output)_\n\n    define([\"require\", \"exports\"], function(require, exports) {\n      return angular.module(\"my.module.config\", [\"ngAnimate\"])\n        .constant(\"myFirstCnt\", true)\n        .constant(\"mySecondCnt\", { \"hello\": \"world\" })\n        .constant(\"myPropCnt\", \"hola!\");\n    });\n\n### configuration in `config.json`\n\n_**gulpfile.js**_\n\n    var ngConstant = require('gulp-ng-constant-fork');\n\n    gulp.task('config', function () {\n      gulp.src('app/config.json')\n        .pipe(ngConstant())\n        // Writes config.js to dist/ folder\n        .pipe(gulp.dest('dist'));\n    });\n\n\n_**app/config.json**_\n\n    {\n      \"name\": \"my.module.config\",\n      \"deps\": [\"ngAnimate\"],\n      \"wrap\": \"commonjs\",\n      \"constants\": {\n        \"myFirstCnt\": true,\n        \"mySecondCnt\": { \"hello\": \"world\" }\n      }\n    }\n\n_**dist/config.js**_ _(output)_\n\n    module.exports = angular.module(\"my.module.config\", [\"ngAnimate\"])\n        .constant(\"myFirstCnt\", true)\n        .constant(\"mySecondCnt\", { \"hello\": \"world\" })\n        .constant(\"myPropCnt\", \"hola!\");\n\n### Options\n\n#### options.name\n\nType: `string`  \nDefault: `undefined`  \nOverrides: `json.name`  \n\nThe module name.\nThis property will override any `name` property defined in the input `json` file.\n\n#### options.dest\n\nType: `string`  \nDefault: `src file name or constant if noFile is true`  \n_optional_\n\nThe path where the generated constant module should be saved. Use to change output filename.\n\n#### options.constants\n\nType: `Object | string`  \nDefault: `undefined`  \nExends/Overrides: `json.constants`  \n\nConstants to defined in the module.\nCan be a `JSON` string or an `Object`.\nThis property extends the one defined in the input `json` file. If there are\nproperties with the same name, this properties will override the ones from the\ninput `json` file.\n\n#### options.deps\n\nType: `array<string>|boolean`  \nDefault: `[]`  \nOverrides: `json.deps`  \n_optional_\n\nAn array that specifies the default dependencies a module should have. When your\nmodule should not have any modules, so you can append the constants to an\nalready existing one, you can set deps to false.\nThis property will override any `deps` property defined in the input `json` file.\n\n#### options.noFile\n\nType: `boolean`  \nDefault: `false`  \n_optional_\n\nBoolean that tells if the configuration should not be read from a src file.\nSet this to true if the plugin is not called inside a pipe and the configuration\nis not loaded from a file.\n\n#### options.wrap\n\nType: `boolean|string`  \nDefault: `false`  \nAvailable: `['amd', 'commonjs']`  \n_optional_\n\nA boolean to active or deactive the automatic wrapping.\nA string who will wrap the result of file, use the\n`<%= __ngModule %>` variable to indicate where to put the generated\nmodule content.\nA string with 'amd' that wraps the module as an AMD module,\ncompatible with RequireJS\n\n#### options.space\n\nType: `string`  \nDefault: `'\\t'`  \n_optional_\n\nA string that defines how the JSON.stringify method will prettify your code.\n\n#### options.template\n\nType: `string`  \nDefault: _content of [tpls/constant.tpl.ejs](https://github.com/andidev/gulp-ng-constant-fork/blob/master/tpls/constant.tpl.ejs)_  \n_optional_\n\nEJS template to apply when creating the output configuration file. The following variables\nare passed to the template during render:\n\n  * `moduleName`: the module name (`string`)\n  * `deps`: the module dependencies (`array<string>`)\n  * `constants`: the module constants (`array<contantObj>`)\n    * where a `constantObj` is an object with a `name` and a `value`, both `strings`.\n\n#### options.templatePath\n\nType: `string`  \nDefault: `'tpls/constant.tpl.ejs'`  \n_optional_\n\nLocation of a custom template file for creating the output configuration file. Defaults to the provided constants template file if none provided.\n\n#### options.interpolate\nType: `Regexp`\nDefault: `undefined` which sets the default lodash interpolation which detects `<%= dataProperty %>`\n\n_optional_\n\nCan be used to set the [loadash regexp](https://lodash.com/docs#templateSettings-interpolate) used to detect data property values to inject.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-ng-constant-fork@0.4.1",
  "_from": "gulp-ng-constant-fork@0.4.1"
}
